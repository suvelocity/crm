name: Build and Deploy to Google Compute Engine

on:
  push:
    branches: [gcloud] # specify the branch you want the deploy to take place from

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GCE_INSTANCE: crm-docker # staging instance
  GCE_INSTANCE_PRODUCTION: crm-production-v1 # production instance
  GCE_INSTANCE_ZONE: us-central1-a
  SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
  DB_PASS: ${{ secrets.DB_PASS }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_NAME: ${{ secrets.DB_NAME }} # staging database
  DB_NAME_PRODUCTION: ${{ secrets.DB_NAME_PRODUCTION_V1 }} # production database
  ENV_FILE: ${{ secrets.ENV_FILE }} # Secret with all additional environment variables.
  REACT_ENV_FILE: ${{ secrets.REACT_ENV_FILE }}
  SERVER_PORT: 80
  CMDTORUN: npm run spinup:prod # staging start script
  CMDTORUN_PRODUCTION: npm run spinup:prod # production start script
  INSTANCE_URL: http://course-staging.suvelocity.org/
  INSTANCE_URL_PRODUCTION: http://34.69.190.91:80/
  ENV_NAME: staging

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Switching to Production Variables if branch is "master"
        if: github.ref == 'refs/heads/master'
        run: |
          echo "GCE_INSTANCE=$GCE_INSTANCE_PRODUCTION" >> $GITHUB_ENV
          echo "CMDTORUN=$CMDTORUN_PRODUCTION" >> $GITHUB_ENV
          echo "DB_NAME=$DB_NAME_PRODUCTION" >> $GITHUB_ENV
          echo "ENV_NAME=production" >> $GITHUB_ENV
          echo "INSTANCE_URL=$INSTANCE_URL_PRODUCTION" >> $GITHUB_ENV
          echo "switched to production variables"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          version: "290.0.1" # optional, if not provided -> resolves to latest version
          service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          project_id: ${{ secrets.PROJECT_ID }}

      # Helper for authentication
      - name: Configure Docker to use gcloud command-line
        run: gcloud --quiet auth configure-docker

      - name: Add React .env file
        run: |
          echo "$REACT_ENV_FILE" > .env
          mv .env ./client/.env

      # Install Dependencies (So the Docker Image Has The Latest Client Version)
      - name: Client Install dependencies
        run: npm ci --only=production
        working-directory: ./client

      # Install Server Dependencies
      - name: Server Install dependencies
        run: npm ci --only=production
        working-directory: ./server

      # Build production build (So the Docker Image Has The Latest Build Version)
      - name: Create production build
        run: CI=false npm run build:prod
        working-directory: ./client

      # Compile Typescript for production build
      - name: Compile Typescript for production build
        run: CI=false npm run build
        working-directory: ./server

      - name: create .env file, decode it
        run: |
          echo "$ENV_FILE" > .env
          base64 .env > .env.b64

      - name: Send .env File
        run: gcloud compute scp .env.b64 --zone $GCE_INSTANCE_ZONE $GCE_INSTANCE:~

      # Build the Docker image
      - name: Build image
        run: make build

      # Push the Docker image to Google Container Registry
      - name: Publish image
        run: make push

      - name: decode .env File for container use
        run: make ssh-cmd CMD='base64 -d .env.b64 > .env && rm .env.b64'

      # Deploy Container to Gcloud Instance
      - name: deploy
        run: make deploy

      # Enable When using ENV_FILE Secret
      - name: Remove .env File
        run: make remove-env
